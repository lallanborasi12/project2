{"ast":null,"code":"import React,{Suspense,useEffect,useRef,useState}from\"react\";import Loader from\"../common/Loader\";import{jsx as _jsx}from\"react/jsx-runtime\";const HomeController=/*#__PURE__*/React.lazy(()=>import('../../controllers/HomeController'));const Home=()=>{const[isLoading,setIsLoading]=useState(true);useEffect(()=>{// Simulating data fetching (replace this with your actual data fetching logic)\nconst fetchData=async()=>{try{// Simulating a delay for demonstration purposes\nawait new Promise(resolve=>setTimeout(resolve,150));// Once the data is fetched, update the isLoading state\nsetIsLoading(false);}catch(error){// Handle errors if needed\nconsole.error('Error fetching data:',error);}};// Call the fetchData function\nfetchData();},[]);// Empty dependency array ensures that this effect runs only once\n// If data is still loading, display the Loader\nif(isLoading){return/*#__PURE__*/_jsx(Loader,{});}// If data has been loaded, display the HomeController\nreturn/*#__PURE__*/_jsx(Suspense,{fallback:/*#__PURE__*/_jsx(Loader,{}),children:/*#__PURE__*/_jsx(HomeController,{})});};export default/*#__PURE__*/React.memo(Home);","map":{"version":3,"names":["React","Suspense","useEffect","useRef","useState","Loader","jsx","_jsx","HomeController","lazy","Home","isLoading","setIsLoading","fetchData","Promise","resolve","setTimeout","error","console","fallback","children","memo"],"sources":["/var/www/html8/pro.ketobalanced.com/glb.keto/src/components/pages/Home.js"],"sourcesContent":["import React, { Suspense, useEffect, useRef, useState } from \"react\";\r\nimport Loader from \"../common/Loader\";\r\nconst HomeController = React.lazy(() => import('../../controllers/HomeController'));\r\n\r\nconst Home = () => {\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        // Simulating data fetching (replace this with your actual data fetching logic)\r\n        const fetchData = async () => {\r\n            try {\r\n                // Simulating a delay for demonstration purposes\r\n                await new Promise((resolve) => setTimeout(resolve, 150));\r\n\r\n                // Once the data is fetched, update the isLoading state\r\n                setIsLoading(false);\r\n            } catch (error) {\r\n                // Handle errors if needed\r\n                console.error('Error fetching data:', error);\r\n            }\r\n        };\r\n\r\n        // Call the fetchData function\r\n        fetchData();\r\n    }, []); // Empty dependency array ensures that this effect runs only once\r\n\r\n    // If data is still loading, display the Loader\r\n    if (isLoading) {\r\n        return <Loader />;\r\n    }\r\n\r\n    // If data has been loaded, display the HomeController\r\n    return (\r\n        <Suspense fallback={<Loader />}>\r\n            <HomeController />\r\n        </Suspense>\r\n    );\r\n};\r\n\r\nexport default React.memo(Home);"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,CAAEC,MAAM,CAAEC,QAAQ,KAAQ,OAAO,CACpE,MAAO,CAAAC,MAAM,KAAM,kBAAkB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBACtC,KAAM,CAAAC,cAAc,cAAGR,KAAK,CAACS,IAAI,CAAC,IAAM,MAAM,CAAC,kCAAkC,CAAC,CAAC,CAEnF,KAAM,CAAAC,IAAI,CAAGA,CAAA,GAAM,CACf,KAAM,CAACC,SAAS,CAAEC,YAAY,CAAC,CAAGR,QAAQ,CAAC,IAAI,CAAC,CAEhDF,SAAS,CAAC,IAAM,CACZ;AACA,KAAM,CAAAW,SAAS,CAAG,KAAAA,CAAA,GAAY,CAC1B,GAAI,CACA;AACA,KAAM,IAAI,CAAAC,OAAO,CAAEC,OAAO,EAAKC,UAAU,CAACD,OAAO,CAAE,GAAG,CAAC,CAAC,CAExD;AACAH,YAAY,CAAC,KAAK,CAAC,CACvB,CAAE,MAAOK,KAAK,CAAE,CACZ;AACAC,OAAO,CAACD,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAChD,CACJ,CAAC,CAED;AACAJ,SAAS,CAAC,CAAC,CACf,CAAC,CAAE,EAAE,CAAC,CAAE;AAER;AACA,GAAIF,SAAS,CAAE,CACX,mBAAOJ,IAAA,CAACF,MAAM,GAAE,CAAC,CACrB,CAEA;AACA,mBACIE,IAAA,CAACN,QAAQ,EAACkB,QAAQ,cAAEZ,IAAA,CAACF,MAAM,GAAE,CAAE,CAAAe,QAAA,cAC3Bb,IAAA,CAACC,cAAc,GAAE,CAAC,CACZ,CAAC,CAEnB,CAAC,CAED,2BAAeR,KAAK,CAACqB,IAAI,CAACX,IAAI,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}