{"ast":null,"code":"import React,{Suspense,useEffect,useRef,useState}from\"react\";import Loader from\"../common/Loader\";import{DataLayer}from\"../common/Function\";import{jsx as _jsx}from\"react/jsx-runtime\";const HomeController=/*#__PURE__*/React.lazy(()=>import(\"../../controllers/HomeController\"));const Home=()=>{const[isLoading,setIsLoading]=useState(true);useEffect(()=>{// Simulating data fetching (replace this with your actual data fetching logic)\nconst fetchData=async()=>{try{// Simulating a delay for demonstration purposes\nawait new Promise(resolve=>setTimeout(resolve,150));// Once the data is fetched, update the isLoading state\nsetIsLoading(false);}catch(error){// Handle errors if needed\nconsole.error(\"Error fetching data:\",error);}};// Push the event to the dataLayer\nconst dataLayer_res=DataLayer({event:\"genderPageView\",stage:\"Gender Selection\"});// Call the fetchData function\nfetchData();},[]);// Empty dependency array ensures that this effect runs only once\n// If data is still loading, display the Loader\nif(isLoading){return/*#__PURE__*/_jsx(Loader,{});}// If data has been loaded, display the HomeController\nreturn/*#__PURE__*/_jsx(Suspense,{fallback:/*#__PURE__*/_jsx(Loader,{}),children:/*#__PURE__*/_jsx(HomeController,{})});};export default/*#__PURE__*/React.memo(Home);","map":{"version":3,"names":["React","Suspense","useEffect","useRef","useState","Loader","DataLayer","jsx","_jsx","HomeController","lazy","Home","isLoading","setIsLoading","fetchData","Promise","resolve","setTimeout","error","console","dataLayer_res","event","stage","fallback","children","memo"],"sources":["/var/www/html8/pro.ketobalanced.com/glb.keto/src/components/pages/Home.js"],"sourcesContent":["import React, { Suspense, useEffect, useRef, useState } from \"react\";\r\nimport Loader from \"../common/Loader\";\r\nimport { DataLayer } from \"../common/Function\";\r\nconst HomeController = React.lazy(() =>\r\n  import(\"../../controllers/HomeController\")\r\n);\r\n\r\nconst Home = () => {\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Simulating data fetching (replace this with your actual data fetching logic)\r\n    const fetchData = async () => {\r\n      try {\r\n        // Simulating a delay for demonstration purposes\r\n        await new Promise((resolve) => setTimeout(resolve, 150));\r\n\r\n        // Once the data is fetched, update the isLoading state\r\n        setIsLoading(false);\r\n      } catch (error) {\r\n        // Handle errors if needed\r\n        console.error(\"Error fetching data:\", error);\r\n      }\r\n    };\r\n\r\n    // Push the event to the dataLayer\r\n    const dataLayer_res = DataLayer({\r\n      event: \"genderPageView\",\r\n      stage: \"Gender Selection\",\r\n    });\r\n\r\n    // Call the fetchData function\r\n    fetchData();\r\n  }, []); // Empty dependency array ensures that this effect runs only once\r\n\r\n  // If data is still loading, display the Loader\r\n  if (isLoading) {\r\n    return <Loader />;\r\n  }\r\n\r\n  // If data has been loaded, display the HomeController\r\n  return (\r\n    <Suspense fallback={<Loader />}>\r\n      <HomeController />\r\n    </Suspense>\r\n  );\r\n};\r\n\r\nexport default React.memo(Home);\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,CAAEC,MAAM,CAAEC,QAAQ,KAAQ,OAAO,CACpE,MAAO,CAAAC,MAAM,KAAM,kBAAkB,CACrC,OAASC,SAAS,KAAQ,oBAAoB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAC/C,KAAM,CAAAC,cAAc,cAAGT,KAAK,CAACU,IAAI,CAAC,IAChC,MAAM,CAAC,kCAAkC,CAC3C,CAAC,CAED,KAAM,CAAAC,IAAI,CAAGA,CAAA,GAAM,CACjB,KAAM,CAACC,SAAS,CAAEC,YAAY,CAAC,CAAGT,QAAQ,CAAC,IAAI,CAAC,CAEhDF,SAAS,CAAC,IAAM,CACd;AACA,KAAM,CAAAY,SAAS,CAAG,KAAAA,CAAA,GAAY,CAC5B,GAAI,CACF;AACA,KAAM,IAAI,CAAAC,OAAO,CAAEC,OAAO,EAAKC,UAAU,CAACD,OAAO,CAAE,GAAG,CAAC,CAAC,CAExD;AACAH,YAAY,CAAC,KAAK,CAAC,CACrB,CAAE,MAAOK,KAAK,CAAE,CACd;AACAC,OAAO,CAACD,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAC9C,CACF,CAAC,CAED;AACA,KAAM,CAAAE,aAAa,CAAGd,SAAS,CAAC,CAC9Be,KAAK,CAAE,gBAAgB,CACvBC,KAAK,CAAE,kBACT,CAAC,CAAC,CAEF;AACAR,SAAS,CAAC,CAAC,CACb,CAAC,CAAE,EAAE,CAAC,CAAE;AAER;AACA,GAAIF,SAAS,CAAE,CACb,mBAAOJ,IAAA,CAACH,MAAM,GAAE,CAAC,CACnB,CAEA;AACA,mBACEG,IAAA,CAACP,QAAQ,EAACsB,QAAQ,cAAEf,IAAA,CAACH,MAAM,GAAE,CAAE,CAAAmB,QAAA,cAC7BhB,IAAA,CAACC,cAAc,GAAE,CAAC,CACV,CAAC,CAEf,CAAC,CAED,2BAAeT,KAAK,CAACyB,IAAI,CAACd,IAAI,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}